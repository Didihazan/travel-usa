'use strict';

var _ = require('lodash');
var Promise = require('bluebird');

var config = {
  expect: 'promise',
  path: '',
  strict: true,
  init: 'init'
};

function Warm() {
  var cfg = this.cfg = _.clone(config);
  this.payloads = _.chain(arguments)
    .values()
    .flatten()
    .filter(function (item) {
      if(_.isPlainObject(item)) {
        _.extend(cfg, item);
        if(item.path && item.path[item.path.length-1] !== '/') {
          cfg.path += '/';
        }
        return false;
      }
      return true;
    })
    .map(this._promisify.bind(this))
    .value();

}

// try to load module and return init as promise
Warm.prototype._promisify = function (item) {

  var cfg = this.cfg, _module = null;

  function wrap(err) {
    return function () {
      return err ? Promise.reject(err) : Promise.resolve();
    };
  }

  if(typeof item === 'string') {
    _module = require(this.cfg.path + item);
  } else {
    _module = item;
  }
  var warmPayload = _module && _module[cfg.init];
  if (warmPayload instanceof Function) {
    if(cfg.expect === 'promise') {
      return warmPayload;
    }
    return function() {
      return new Promise(function(resolve, reject) {
        warmPayload(function (err, res) {
          return err ? reject(err) : resolve(res);
        });
      });
    };
  }

  if(cfg.strict) {
    return wrap(new Error('.'+cfg.init+'() should be function (containing callback or promise)'));
  }
  return wrap();
};

Warm.prototype.parallel = function (callback) {
  return Promise.each(this.payloads, function(item) {
    return item();
  }).then(function() {
    if(callback) {
      callback();
    }
  }).catch(function(err) {
    if(callback) {
      callback(err);
    } else {
      throw err;
    }
  });
};

Warm.prototype.series = function () {
  throw new Error('not implemented');
};

module.exports = Warm;
